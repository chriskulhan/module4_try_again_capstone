# OverviewStudents drinking coffee
# In this lab, you'll review fundamental Python concepts by completing exercises in GitHub Codespaces. 
# Focus areas include:

# Object-Oriented Programming (OOP)
# Classes and Methods
# Data Structures
# Control Flow
# ⚡ Prerequisites
# Access to GitHub
# Basic Python knowledge
# Setup Instructions
# Step 1: Create a New Repository
# Click on the green Create Repository button on the dashboard. If you don't see the button, 
# click on the + symbol on the toolbar and click New Repository in the drop-down menu.

# GitHub dashboard
# In the repository name textbox, enter the name of your repository. Leave all of the default settings.
# Scroll down and check Add a README file.
# Click the green Create Repository button.
# Step 2: Coding in GitHub Codespaces
# Cat
# Introduction
# Welcome to GitHub Codespaces, where your development environment is just a click away! Codespaces 
# is a cloud-based platform that provides you with a fully-fledged, customizable, and ready-to-code 
# development environment for your projects.

# CodeSpaces is based on the Visual Studio Code editor: https://code.visualstudio.com/

# GitHub Codespaces supports a variety of programming languages, including:

# Python
# Node.js
# Java
# C# (.NET)
# How to Code in GitHub CodeSpaces
# Go to GitHub.com and sign in.
# Click on the Octocat icon Octocat icon in the upper left corner to open the dashboard.
# Click on the + symbol on the toolbar and choose New Codespace from the drop-down menu.

# New Codespace
# Select your repository and click Create Codespace.
# Click on the Extension button. Search for the Python extension from Microsoft. Install the Python extension.
# Create your Python file using these commands in the Terminal. 
# mkdir Module4Project
# cd Module4Project
# touch Module4Project.py
# Minneapolis College Dunn Brothers Delivery ManagerDunn Brothers counter
# Project Overview ☕
# Create a Python program to manage delivery orders from the Dunn Brothers coffee shop in Minneapolis 
# College's T Building! This app helps students and staff order drinks and food for delivery to various 
# locations around campus.

# Part 1: In-Class Exercise 👩🏽‍💻
# Enter the code into your Python file.
# Go to the Terminal tab and type: python Module4Project.py to run and test your app.
# Commit your changes to the repo. Click the Source Control button, enter a commit message, and click the 
# Commit button. Then click Sync Changes. Confirm your code was pushed to the repo.
# Copy and paste the URL for your repo into the textbox at the bottom of this assignment, then click Submit.
# # The DunnDelivery class demonstrates core OOP concepts:
# # - Encapsulation: Data (menu, prices) and methods are bundled in the class
# # - Abstraction: Complex delivery logic is hidden behind simple method calls
# class DunnDelivery:
#     def __init__(self):
#         # Class attributes demonstrate encapsulation 
#         # by keeping related data together
#         self.menu = {
#             "Energy Drinks": ["Monster", "Rockstar"],
#             "Coffee Drinks": ["Latte", "Cappuccino"],
#             "Breakfast": ["Bagel", "Muffin", "Scone"],
#             "Lunch": ["Falafel Wrap", "Hummus & Pita", "Chicken Wrap"]
#         }
        
#         # Prices encapsulated within the class
#         self.prices = {
#             "Monster": 3.99, "Rockstar": 3.99,
#             "Latte": 4.99, "Cappuccino": 4.99,
#             "Bagel": 2.99, "Muffin": 2.99, "Scone": 2.99,
#             "Falafel Wrap": 8.99, "Hummus & Pita": 7.99, "Chicken Wrap": 8.99,        
#         }
        
#         self.delivery_locations = {
#             "Library": 10,  # minutes
#             "Academic Success Center": 8,
#             "ITEC Computer Lab": 5
#         }
    
#     def show_menu(self, category=None):
#         if category:
#             print(f"\n=== {category} ===")
#             for item in self.menu[category]:
#                 print(f"{item}: ${self.prices[item]:.2f}")
#         else:
#             for category in self.menu:
#                 print(f"\n=== {category} ===")
#                 for item in self.menu[category]:
#                     print(f"{item}: ${self.prices[item]:.2f}")
    
#     def calculate_total(self, items, has_student_id=False):
#         total = sum(self.prices[item] for item in items)
#         if has_student_id and total > 10:
#             total *= 0.9
#         return total
    
#     def estimate_delivery(self, location, current_hour):
#         base_time = self.delivery_locations[location]
#         if (9 <= current_hour <= 10) or (11 <= current_hour <= 13):
#             return base_time + 5
#         return base_time

#     def print_order(self, location, items, current_hour, has_student_id=False):
#         print("\n=== Order Summary ===")
#         print(f"Delivery to: {location}")
#         print("\nItems ordered:")
#         for item in items:
#             print(f"- {item}: ${self.prices[item]:.2f}")
        
#         total = self.calculate_total(items, has_student_id)
#         delivery_time = self.estimate_delivery(location, current_hour)
        
#         print(f"\nSubtotal: ${sum(self.prices[item] for item in items):.2f}")
#         if has_student_id and total < sum(self.prices[item] for item in items):
#             print("Student Discount Applied!")
#         print(f"Total after discount: ${total:.2f}")
#         print(f"Estimated delivery time: {delivery_time} minutes")

# # Example usage
# def main():
#     delivery = DunnDelivery()
#     delivery.show_menu("Coffee Drinks")
    
#     # Sample order at 9:30 AM (peak morning hour)
#     order = ["Latte", "Bagel"]
#     delivery.print_order("ITEC Computer Lab", order, 9, has_student_id=True)

# if __name__ == "__main__":
#     main()
# Part 2: Individual Exercise 📝
# Enhance the Minneapolis College Dunn Brothers Delivery app with these modifications:

# Add three new seasonal drinks to the Coffee Drinks menu (think creative winter warmers or summer coolers!)
# Create a rate_delivery method that lets customers rate their delivery (1-5 stars)
# Add a "priority delivery" option that costs $2 extra but reduces delivery time by 3 minutes
# Create a method to search for all items under a certain price (great for budget-conscious students!)
# Expected Output
# === Coffee Drinks ===
# Cold Press: $4.49
# Latte: $4.99
# Americano: $3.99
# Cappuccino: $4.99

# === Order Summary ===
# Delivery to: ITEC Computer Lab

# Items ordered:
# - Cold Press: $4.49
# - Bagel: $2.99
# - Fruit Cup: $3.49

# Subtotal: $10.97
# Student Discount Applied!
# Total after discount: $9.87
# Estimated delivery time: 10 minutes
# Optional Fun Challenge 🌟
# Create a StudyGroupOrder class that inherits from DunnDelivery and allows study groups to combine 
# their orders with a special group discount when ordering 5 or more items!

# Submit Your Work
# How to Submit Your Project
# Click on the Octocat logo in the upper left corner of the GitHub screen to go to your Dashboard.

# On the left side of the dashboard, click on your repository name in the list of Top Repositories.
# Click on Octocat logo then click on the repository name in the list of Top Repositories

# Highlight the URL for your repository in the address bar of your browser.

# Copy and paste the URL for your GitHub repository into the textbox at the bottom of this lab and click submit. 

# If you don't finish your project, please turn in your rough draft so you don't receive a zero. 
# Add a comment to the textbox that this is a rough draft so your instructor knows to hold off grading your project.

# Upload your final draft by the final due date for the course, which is 4 PM on Thursday of the 
# final week of the semester.

# Congratulations! Give yourself a pat on the back for finishing your project! 👐🏻👐🏿👐🏼👐👐🏾
